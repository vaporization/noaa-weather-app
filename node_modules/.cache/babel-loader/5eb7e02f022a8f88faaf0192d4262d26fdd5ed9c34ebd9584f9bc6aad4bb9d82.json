{"ast":null,"code":"\"use client\";\n\n// packages/react/navigation-menu/src/NavigationMenu.tsx\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { Primitive, dispatchDiscreteCustomEvent } from \"@radix-ui/react-primitive\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { composeRefs, useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport * as VisuallyHiddenPrimitive from \"@radix-ui/react-visually-hidden\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar NAVIGATION_MENU_NAME = \"NavigationMenu\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(NAVIGATION_MENU_NAME);\nvar [FocusGroupCollection, useFocusGroupCollection, createFocusGroupCollectionScope] = createCollection(NAVIGATION_MENU_NAME);\nvar [createNavigationMenuContext, createNavigationMenuScope] = createContextScope(NAVIGATION_MENU_NAME, [createCollectionScope, createFocusGroupCollectionScope]);\nvar [NavigationMenuProviderImpl, useNavigationMenuContext] = createNavigationMenuContext(NAVIGATION_MENU_NAME);\nvar [ViewportContentProvider, useViewportContentContext] = createNavigationMenuContext(NAVIGATION_MENU_NAME);\nvar NavigationMenu = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value: valueProp,\n    onValueChange,\n    defaultValue,\n    delayDuration = 200,\n    skipDelayDuration = 300,\n    orientation = \"horizontal\",\n    dir,\n    ...NavigationMenuProps\n  } = props;\n  const [navigationMenu, setNavigationMenu] = React.useState(null);\n  const composedRef = useComposedRefs(forwardedRef, node => setNavigationMenu(node));\n  const direction = useDirection(dir);\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n  const skipDelayTimerRef = React.useRef(0);\n  const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n  const [value = \"\", setValue] = useControllableState({\n    prop: valueProp,\n    onChange: value2 => {\n      const isOpen = value2 !== \"\";\n      const hasSkipDelayDuration = skipDelayDuration > 0;\n      if (isOpen) {\n        window.clearTimeout(skipDelayTimerRef.current);\n        if (hasSkipDelayDuration) setIsOpenDelayed(false);\n      } else {\n        window.clearTimeout(skipDelayTimerRef.current);\n        skipDelayTimerRef.current = window.setTimeout(() => setIsOpenDelayed(true), skipDelayDuration);\n      }\n      onValueChange === null || onValueChange === void 0 || onValueChange(value2);\n    },\n    defaultProp: defaultValue\n  });\n  const startCloseTimer = React.useCallback(() => {\n    window.clearTimeout(closeTimerRef.current);\n    closeTimerRef.current = window.setTimeout(() => setValue(\"\"), 150);\n  }, [setValue]);\n  const handleOpen = React.useCallback(itemValue => {\n    window.clearTimeout(closeTimerRef.current);\n    setValue(itemValue);\n  }, [setValue]);\n  const handleDelayedOpen = React.useCallback(itemValue => {\n    const isOpenItem = value === itemValue;\n    if (isOpenItem) {\n      window.clearTimeout(closeTimerRef.current);\n    } else {\n      openTimerRef.current = window.setTimeout(() => {\n        window.clearTimeout(closeTimerRef.current);\n        setValue(itemValue);\n      }, delayDuration);\n    }\n  }, [value, setValue, delayDuration]);\n  React.useEffect(() => {\n    return () => {\n      window.clearTimeout(openTimerRef.current);\n      window.clearTimeout(closeTimerRef.current);\n      window.clearTimeout(skipDelayTimerRef.current);\n    };\n  }, []);\n  return /* @__PURE__ */jsx(NavigationMenuProvider, {\n    scope: __scopeNavigationMenu,\n    isRootMenu: true,\n    value,\n    dir: direction,\n    orientation,\n    rootNavigationMenu: navigationMenu,\n    onTriggerEnter: itemValue => {\n      window.clearTimeout(openTimerRef.current);\n      if (isOpenDelayed) handleDelayedOpen(itemValue);else handleOpen(itemValue);\n    },\n    onTriggerLeave: () => {\n      window.clearTimeout(openTimerRef.current);\n      startCloseTimer();\n    },\n    onContentEnter: () => window.clearTimeout(closeTimerRef.current),\n    onContentLeave: startCloseTimer,\n    onItemSelect: itemValue => {\n      setValue(prevValue => prevValue === itemValue ? \"\" : itemValue);\n    },\n    onItemDismiss: () => setValue(\"\"),\n    children: /* @__PURE__ */jsx(Primitive.nav, {\n      \"aria-label\": \"Main\",\n      \"data-orientation\": orientation,\n      dir: direction,\n      ...NavigationMenuProps,\n      ref: composedRef\n    })\n  });\n});\nNavigationMenu.displayName = NAVIGATION_MENU_NAME;\nvar SUB_NAME = \"NavigationMenuSub\";\nvar NavigationMenuSub = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value: valueProp,\n    onValueChange,\n    defaultValue,\n    orientation = \"horizontal\",\n    ...subProps\n  } = props;\n  const context = useNavigationMenuContext(SUB_NAME, __scopeNavigationMenu);\n  const [value = \"\", setValue] = useControllableState({\n    prop: valueProp,\n    onChange: onValueChange,\n    defaultProp: defaultValue\n  });\n  return /* @__PURE__ */jsx(NavigationMenuProvider, {\n    scope: __scopeNavigationMenu,\n    isRootMenu: false,\n    value,\n    dir: context.dir,\n    orientation,\n    rootNavigationMenu: context.rootNavigationMenu,\n    onTriggerEnter: itemValue => setValue(itemValue),\n    onItemSelect: itemValue => setValue(itemValue),\n    onItemDismiss: () => setValue(\"\"),\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      \"data-orientation\": orientation,\n      ...subProps,\n      ref: forwardedRef\n    })\n  });\n});\nNavigationMenuSub.displayName = SUB_NAME;\nvar NavigationMenuProvider = props => {\n  const {\n    scope,\n    isRootMenu,\n    rootNavigationMenu,\n    dir,\n    orientation,\n    children,\n    value,\n    onItemSelect,\n    onItemDismiss,\n    onTriggerEnter,\n    onTriggerLeave,\n    onContentEnter,\n    onContentLeave\n  } = props;\n  const [viewport, setViewport] = React.useState(null);\n  const [viewportContent, setViewportContent] = React.useState( /* @__PURE__ */new Map());\n  const [indicatorTrack, setIndicatorTrack] = React.useState(null);\n  return /* @__PURE__ */jsx(NavigationMenuProviderImpl, {\n    scope,\n    isRootMenu,\n    rootNavigationMenu,\n    value,\n    previousValue: usePrevious(value),\n    baseId: useId(),\n    dir,\n    orientation,\n    viewport,\n    onViewportChange: setViewport,\n    indicatorTrack,\n    onIndicatorTrackChange: setIndicatorTrack,\n    onTriggerEnter: useCallbackRef(onTriggerEnter),\n    onTriggerLeave: useCallbackRef(onTriggerLeave),\n    onContentEnter: useCallbackRef(onContentEnter),\n    onContentLeave: useCallbackRef(onContentLeave),\n    onItemSelect: useCallbackRef(onItemSelect),\n    onItemDismiss: useCallbackRef(onItemDismiss),\n    onViewportContentChange: React.useCallback((contentValue, contentData) => {\n      setViewportContent(prevContent => {\n        prevContent.set(contentValue, contentData);\n        return new Map(prevContent);\n      });\n    }, []),\n    onViewportContentRemove: React.useCallback(contentValue => {\n      setViewportContent(prevContent => {\n        if (!prevContent.has(contentValue)) return prevContent;\n        prevContent.delete(contentValue);\n        return new Map(prevContent);\n      });\n    }, []),\n    children: /* @__PURE__ */jsx(Collection.Provider, {\n      scope,\n      children: /* @__PURE__ */jsx(ViewportContentProvider, {\n        scope,\n        items: viewportContent,\n        children\n      })\n    })\n  });\n};\nvar LIST_NAME = \"NavigationMenuList\";\nvar NavigationMenuList = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    ...listProps\n  } = props;\n  const context = useNavigationMenuContext(LIST_NAME, __scopeNavigationMenu);\n  const list = /* @__PURE__ */jsx(Primitive.ul, {\n    \"data-orientation\": context.orientation,\n    ...listProps,\n    ref: forwardedRef\n  });\n  return /* @__PURE__ */jsx(Primitive.div, {\n    style: {\n      position: \"relative\"\n    },\n    ref: context.onIndicatorTrackChange,\n    children: /* @__PURE__ */jsx(Collection.Slot, {\n      scope: __scopeNavigationMenu,\n      children: context.isRootMenu ? /* @__PURE__ */jsx(FocusGroup, {\n        asChild: true,\n        children: list\n      }) : list\n    })\n  });\n});\nNavigationMenuList.displayName = LIST_NAME;\nvar ITEM_NAME = \"NavigationMenuItem\";\nvar [NavigationMenuItemContextProvider, useNavigationMenuItemContext] = createNavigationMenuContext(ITEM_NAME);\nvar NavigationMenuItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value: valueProp,\n    ...itemProps\n  } = props;\n  const autoValue = useId();\n  const value = valueProp || autoValue || \"LEGACY_REACT_AUTO_VALUE\";\n  const contentRef = React.useRef(null);\n  const triggerRef = React.useRef(null);\n  const focusProxyRef = React.useRef(null);\n  const restoreContentTabOrderRef = React.useRef(() => {});\n  const wasEscapeCloseRef = React.useRef(false);\n  const handleContentEntry = React.useCallback(function () {\n    let side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"start\";\n    if (contentRef.current) {\n      restoreContentTabOrderRef.current();\n      const candidates = getTabbableCandidates(contentRef.current);\n      if (candidates.length) focusFirst(side === \"start\" ? candidates : candidates.reverse());\n    }\n  }, []);\n  const handleContentExit = React.useCallback(() => {\n    if (contentRef.current) {\n      const candidates = getTabbableCandidates(contentRef.current);\n      if (candidates.length) restoreContentTabOrderRef.current = removeFromTabOrder(candidates);\n    }\n  }, []);\n  return /* @__PURE__ */jsx(NavigationMenuItemContextProvider, {\n    scope: __scopeNavigationMenu,\n    value,\n    triggerRef,\n    contentRef,\n    focusProxyRef,\n    wasEscapeCloseRef,\n    onEntryKeyDown: handleContentEntry,\n    onFocusProxyEnter: handleContentEntry,\n    onRootContentClose: handleContentExit,\n    onContentFocusOutside: handleContentExit,\n    children: /* @__PURE__ */jsx(Primitive.li, {\n      ...itemProps,\n      ref: forwardedRef\n    })\n  });\n});\nNavigationMenuItem.displayName = ITEM_NAME;\nvar TRIGGER_NAME = \"NavigationMenuTrigger\";\nvar NavigationMenuTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    disabled,\n    ...triggerProps\n  } = props;\n  const context = useNavigationMenuContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(ref, itemContext.triggerRef, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, itemContext.value);\n  const contentId = makeContentId(context.baseId, itemContext.value);\n  const hasPointerMoveOpenedRef = React.useRef(false);\n  const wasClickCloseRef = React.useRef(false);\n  const open = itemContext.value === context.value;\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(Collection.ItemSlot, {\n      scope: __scopeNavigationMenu,\n      value: itemContext.value,\n      children: /* @__PURE__ */jsx(FocusGroupItem, {\n        asChild: true,\n        children: /* @__PURE__ */jsx(Primitive.button, {\n          id: triggerId,\n          disabled,\n          \"data-disabled\": disabled ? \"\" : void 0,\n          \"data-state\": getOpenState(open),\n          \"aria-expanded\": open,\n          \"aria-controls\": contentId,\n          ...triggerProps,\n          ref: composedRefs,\n          onPointerEnter: composeEventHandlers(props.onPointerEnter, () => {\n            wasClickCloseRef.current = false;\n            itemContext.wasEscapeCloseRef.current = false;\n          }),\n          onPointerMove: composeEventHandlers(props.onPointerMove, whenMouse(() => {\n            if (disabled || wasClickCloseRef.current || itemContext.wasEscapeCloseRef.current || hasPointerMoveOpenedRef.current) return;\n            context.onTriggerEnter(itemContext.value);\n            hasPointerMoveOpenedRef.current = true;\n          })),\n          onPointerLeave: composeEventHandlers(props.onPointerLeave, whenMouse(() => {\n            if (disabled) return;\n            context.onTriggerLeave();\n            hasPointerMoveOpenedRef.current = false;\n          })),\n          onClick: composeEventHandlers(props.onClick, () => {\n            context.onItemSelect(itemContext.value);\n            wasClickCloseRef.current = open;\n          }),\n          onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n            const verticalEntryKey = context.dir === \"rtl\" ? \"ArrowLeft\" : \"ArrowRight\";\n            const entryKey = {\n              horizontal: \"ArrowDown\",\n              vertical: verticalEntryKey\n            }[context.orientation];\n            if (open && event.key === entryKey) {\n              itemContext.onEntryKeyDown();\n              event.preventDefault();\n            }\n          })\n        })\n      })\n    }), open && /* @__PURE__ */jsxs(Fragment, {\n      children: [/* @__PURE__ */jsx(VisuallyHiddenPrimitive.Root, {\n        \"aria-hidden\": true,\n        tabIndex: 0,\n        ref: itemContext.focusProxyRef,\n        onFocus: event => {\n          const content = itemContext.contentRef.current;\n          const prevFocusedElement = event.relatedTarget;\n          const wasTriggerFocused = prevFocusedElement === ref.current;\n          const wasFocusFromContent = content === null || content === void 0 ? void 0 : content.contains(prevFocusedElement);\n          if (wasTriggerFocused || !wasFocusFromContent) {\n            itemContext.onFocusProxyEnter(wasTriggerFocused ? \"start\" : \"end\");\n          }\n        }\n      }), context.viewport && /* @__PURE__ */jsx(\"span\", {\n        \"aria-owns\": contentId\n      })]\n    })]\n  });\n});\nNavigationMenuTrigger.displayName = TRIGGER_NAME;\nvar LINK_NAME = \"NavigationMenuLink\";\nvar LINK_SELECT = \"navigationMenu.linkSelect\";\nvar NavigationMenuLink = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    active,\n    onSelect,\n    ...linkProps\n  } = props;\n  return /* @__PURE__ */jsx(FocusGroupItem, {\n    asChild: true,\n    children: /* @__PURE__ */jsx(Primitive.a, {\n      \"data-active\": active ? \"\" : void 0,\n      \"aria-current\": active ? \"page\" : void 0,\n      ...linkProps,\n      ref: forwardedRef,\n      onClick: composeEventHandlers(props.onClick, event => {\n        const target = event.target;\n        const linkSelectEvent = new CustomEvent(LINK_SELECT, {\n          bubbles: true,\n          cancelable: true\n        });\n        target.addEventListener(LINK_SELECT, event2 => onSelect === null || onSelect === void 0 ? void 0 : onSelect(event2), {\n          once: true\n        });\n        dispatchDiscreteCustomEvent(target, linkSelectEvent);\n        if (!linkSelectEvent.defaultPrevented && !event.metaKey) {\n          const rootContentDismissEvent = new CustomEvent(ROOT_CONTENT_DISMISS, {\n            bubbles: true,\n            cancelable: true\n          });\n          dispatchDiscreteCustomEvent(target, rootContentDismissEvent);\n        }\n      }, {\n        checkForDefaultPrevented: false\n      })\n    })\n  });\n});\nNavigationMenuLink.displayName = LINK_NAME;\nvar INDICATOR_NAME = \"NavigationMenuIndicator\";\nvar NavigationMenuIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...indicatorProps\n  } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, props.__scopeNavigationMenu);\n  const isVisible = Boolean(context.value);\n  return context.indicatorTrack ? ReactDOM.createPortal( /* @__PURE__ */jsx(Presence, {\n    present: forceMount || isVisible,\n    children: /* @__PURE__ */jsx(NavigationMenuIndicatorImpl, {\n      ...indicatorProps,\n      ref: forwardedRef\n    })\n  }), context.indicatorTrack) : null;\n});\nNavigationMenuIndicator.displayName = INDICATOR_NAME;\nvar NavigationMenuIndicatorImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    ...indicatorProps\n  } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, __scopeNavigationMenu);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const [activeTrigger, setActiveTrigger] = React.useState(null);\n  const [position, setPosition] = React.useState(null);\n  const isHorizontal = context.orientation === \"horizontal\";\n  const isVisible = Boolean(context.value);\n  React.useEffect(() => {\n    var _items$find;\n    const items = getItems();\n    const triggerNode = (_items$find = items.find(item => item.value === context.value)) === null || _items$find === void 0 ? void 0 : _items$find.ref.current;\n    if (triggerNode) setActiveTrigger(triggerNode);\n  }, [getItems, context.value]);\n  const handlePositionChange = () => {\n    if (activeTrigger) {\n      setPosition({\n        size: isHorizontal ? activeTrigger.offsetWidth : activeTrigger.offsetHeight,\n        offset: isHorizontal ? activeTrigger.offsetLeft : activeTrigger.offsetTop\n      });\n    }\n  };\n  useResizeObserver(activeTrigger, handlePositionChange);\n  useResizeObserver(context.indicatorTrack, handlePositionChange);\n  return position ? /* @__PURE__ */jsx(Primitive.div, {\n    \"aria-hidden\": true,\n    \"data-state\": isVisible ? \"visible\" : \"hidden\",\n    \"data-orientation\": context.orientation,\n    ...indicatorProps,\n    ref: forwardedRef,\n    style: {\n      position: \"absolute\",\n      ...(isHorizontal ? {\n        left: 0,\n        width: position.size + \"px\",\n        transform: \"translateX(\".concat(position.offset, \"px)\")\n      } : {\n        top: 0,\n        height: position.size + \"px\",\n        transform: \"translateY(\".concat(position.offset, \"px)\")\n      }),\n      ...indicatorProps.style\n    }\n  }) : null;\n});\nvar CONTENT_NAME = \"NavigationMenuContent\";\nvar NavigationMenuContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...contentProps\n  } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const composedRefs = useComposedRefs(itemContext.contentRef, forwardedRef);\n  const open = itemContext.value === context.value;\n  const commonProps = {\n    value: itemContext.value,\n    triggerRef: itemContext.triggerRef,\n    focusProxyRef: itemContext.focusProxyRef,\n    wasEscapeCloseRef: itemContext.wasEscapeCloseRef,\n    onContentFocusOutside: itemContext.onContentFocusOutside,\n    onRootContentClose: itemContext.onRootContentClose,\n    ...contentProps\n  };\n  return !context.viewport ? /* @__PURE__ */jsx(Presence, {\n    present: forceMount || open,\n    children: /* @__PURE__ */jsx(NavigationMenuContentImpl, {\n      \"data-state\": getOpenState(open),\n      ...commonProps,\n      ref: composedRefs,\n      onPointerEnter: composeEventHandlers(props.onPointerEnter, context.onContentEnter),\n      onPointerLeave: composeEventHandlers(props.onPointerLeave, whenMouse(context.onContentLeave)),\n      style: {\n        // Prevent interaction when animating out\n        pointerEvents: !open && context.isRootMenu ? \"none\" : void 0,\n        ...commonProps.style\n      }\n    })\n  }) : /* @__PURE__ */jsx(ViewportContentMounter, {\n    forceMount,\n    ...commonProps,\n    ref: composedRefs\n  });\n});\nNavigationMenuContent.displayName = CONTENT_NAME;\nvar ViewportContentMounter = React.forwardRef((props, forwardedRef) => {\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const {\n    onViewportContentChange,\n    onViewportContentRemove\n  } = context;\n  useLayoutEffect(() => {\n    onViewportContentChange(props.value, {\n      ref: forwardedRef,\n      ...props\n    });\n  }, [props, forwardedRef, onViewportContentChange]);\n  useLayoutEffect(() => {\n    return () => onViewportContentRemove(props.value);\n  }, [props.value, onViewportContentRemove]);\n  return null;\n});\nvar ROOT_CONTENT_DISMISS = \"navigationMenu.rootContentDismiss\";\nvar NavigationMenuContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value,\n    triggerRef,\n    focusProxyRef,\n    wasEscapeCloseRef,\n    onRootContentClose,\n    onContentFocusOutside,\n    ...contentProps\n  } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, __scopeNavigationMenu);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(ref, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const prevMotionAttributeRef = React.useRef(null);\n  const {\n    onItemDismiss\n  } = context;\n  React.useEffect(() => {\n    const content = ref.current;\n    if (context.isRootMenu && content) {\n      const handleClose = () => {\n        var _triggerRef$current;\n        onItemDismiss();\n        onRootContentClose();\n        if (content.contains(document.activeElement)) (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 || _triggerRef$current.focus();\n      };\n      content.addEventListener(ROOT_CONTENT_DISMISS, handleClose);\n      return () => content.removeEventListener(ROOT_CONTENT_DISMISS, handleClose);\n    }\n  }, [context.isRootMenu, props.value, triggerRef, onItemDismiss, onRootContentClose]);\n  const motionAttribute = React.useMemo(() => {\n    const items = getItems();\n    const values = items.map(item => item.value);\n    if (context.dir === \"rtl\") values.reverse();\n    const index = values.indexOf(context.value);\n    const prevIndex = values.indexOf(context.previousValue);\n    const isSelected = value === context.value;\n    const wasSelected = prevIndex === values.indexOf(value);\n    if (!isSelected && !wasSelected) return prevMotionAttributeRef.current;\n    const attribute = (() => {\n      if (index !== prevIndex) {\n        if (isSelected && prevIndex !== -1) return index > prevIndex ? \"from-end\" : \"from-start\";\n        if (wasSelected && index !== -1) return index > prevIndex ? \"to-start\" : \"to-end\";\n      }\n      return null;\n    })();\n    prevMotionAttributeRef.current = attribute;\n    return attribute;\n  }, [context.previousValue, context.value, context.dir, getItems, value]);\n  return /* @__PURE__ */jsx(FocusGroup, {\n    asChild: true,\n    children: /* @__PURE__ */jsx(DismissableLayer, {\n      id: contentId,\n      \"aria-labelledby\": triggerId,\n      \"data-motion\": motionAttribute,\n      \"data-orientation\": context.orientation,\n      ...contentProps,\n      ref: composedRefs,\n      disableOutsidePointerEvents: false,\n      onDismiss: () => {\n        var _ref$current;\n        const rootContentDismissEvent = new Event(ROOT_CONTENT_DISMISS, {\n          bubbles: true,\n          cancelable: true\n        });\n        (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.dispatchEvent(rootContentDismissEvent);\n      },\n      onFocusOutside: composeEventHandlers(props.onFocusOutside, event => {\n        var _context$rootNavigati;\n        onContentFocusOutside();\n        const target = event.target;\n        if ((_context$rootNavigati = context.rootNavigationMenu) !== null && _context$rootNavigati !== void 0 && _context$rootNavigati.contains(target)) event.preventDefault();\n      }),\n      onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, event => {\n        var _context$viewport;\n        const target = event.target;\n        const isTrigger = getItems().some(item => {\n          var _item$ref$current;\n          return (_item$ref$current = item.ref.current) === null || _item$ref$current === void 0 ? void 0 : _item$ref$current.contains(target);\n        });\n        const isRootViewport = context.isRootMenu && ((_context$viewport = context.viewport) === null || _context$viewport === void 0 ? void 0 : _context$viewport.contains(target));\n        if (isTrigger || isRootViewport || !context.isRootMenu) event.preventDefault();\n      }),\n      onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n        const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;\n        const isTabKey = event.key === \"Tab\" && !isMetaKey;\n        if (isTabKey) {\n          const candidates = getTabbableCandidates(event.currentTarget);\n          const focusedElement = document.activeElement;\n          const index = candidates.findIndex(candidate => candidate === focusedElement);\n          const isMovingBackwards = event.shiftKey;\n          const nextCandidates = isMovingBackwards ? candidates.slice(0, index).reverse() : candidates.slice(index + 1, candidates.length);\n          if (focusFirst(nextCandidates)) {\n            event.preventDefault();\n          } else {\n            var _focusProxyRef$curren;\n            (_focusProxyRef$curren = focusProxyRef.current) === null || _focusProxyRef$curren === void 0 || _focusProxyRef$curren.focus();\n          }\n        }\n      }),\n      onEscapeKeyDown: composeEventHandlers(props.onEscapeKeyDown, event => {\n        wasEscapeCloseRef.current = true;\n      })\n    })\n  });\n});\nvar VIEWPORT_NAME = \"NavigationMenuViewport\";\nvar NavigationMenuViewport = React.forwardRef((props, forwardedRef) => {\n  const {\n    forceMount,\n    ...viewportProps\n  } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, props.__scopeNavigationMenu);\n  const open = Boolean(context.value);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || open,\n    children: /* @__PURE__ */jsx(NavigationMenuViewportImpl, {\n      ...viewportProps,\n      ref: forwardedRef\n    })\n  });\n});\nNavigationMenuViewport.displayName = VIEWPORT_NAME;\nvar NavigationMenuViewportImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    children,\n    ...viewportImplProps\n  } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, __scopeNavigationMenu);\n  const composedRefs = useComposedRefs(forwardedRef, context.onViewportChange);\n  const viewportContentContext = useViewportContentContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const [size, setSize] = React.useState(null);\n  const [content, setContent] = React.useState(null);\n  const viewportWidth = size ? (size === null || size === void 0 ? void 0 : size.width) + \"px\" : void 0;\n  const viewportHeight = size ? (size === null || size === void 0 ? void 0 : size.height) + \"px\" : void 0;\n  const open = Boolean(context.value);\n  const activeContentValue = open ? context.value : context.previousValue;\n  const handleSizeChange = () => {\n    if (content) setSize({\n      width: content.offsetWidth,\n      height: content.offsetHeight\n    });\n  };\n  useResizeObserver(content, handleSizeChange);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    \"data-state\": getOpenState(open),\n    \"data-orientation\": context.orientation,\n    ...viewportImplProps,\n    ref: composedRefs,\n    style: {\n      // Prevent interaction when animating out\n      pointerEvents: !open && context.isRootMenu ? \"none\" : void 0,\n      [\"--radix-navigation-menu-viewport-width\"]: viewportWidth,\n      [\"--radix-navigation-menu-viewport-height\"]: viewportHeight,\n      ...viewportImplProps.style\n    },\n    onPointerEnter: composeEventHandlers(props.onPointerEnter, context.onContentEnter),\n    onPointerLeave: composeEventHandlers(props.onPointerLeave, whenMouse(context.onContentLeave)),\n    children: Array.from(viewportContentContext.items).map(_ref => {\n      let [value, {\n        ref,\n        forceMount,\n        ...props2\n      }] = _ref;\n      const isActive = activeContentValue === value;\n      return /* @__PURE__ */jsx(Presence, {\n        present: forceMount || isActive,\n        children: /* @__PURE__ */jsx(NavigationMenuContentImpl, {\n          ...props2,\n          ref: composeRefs(ref, node => {\n            if (isActive && node) setContent(node);\n          })\n        })\n      }, value);\n    })\n  });\n});\nvar FOCUS_GROUP_NAME = \"FocusGroup\";\nvar FocusGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    ...groupProps\n  } = props;\n  const context = useNavigationMenuContext(FOCUS_GROUP_NAME, __scopeNavigationMenu);\n  return /* @__PURE__ */jsx(FocusGroupCollection.Provider, {\n    scope: __scopeNavigationMenu,\n    children: /* @__PURE__ */jsx(FocusGroupCollection.Slot, {\n      scope: __scopeNavigationMenu,\n      children: /* @__PURE__ */jsx(Primitive.div, {\n        dir: context.dir,\n        ...groupProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nvar ARROW_KEYS = [\"ArrowRight\", \"ArrowLeft\", \"ArrowUp\", \"ArrowDown\"];\nvar FOCUS_GROUP_ITEM_NAME = \"FocusGroupItem\";\nvar FocusGroupItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    ...groupProps\n  } = props;\n  const getItems = useFocusGroupCollection(__scopeNavigationMenu);\n  const context = useNavigationMenuContext(FOCUS_GROUP_ITEM_NAME, __scopeNavigationMenu);\n  return /* @__PURE__ */jsx(FocusGroupCollection.ItemSlot, {\n    scope: __scopeNavigationMenu,\n    children: /* @__PURE__ */jsx(Primitive.button, {\n      ...groupProps,\n      ref: forwardedRef,\n      onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n        const isFocusNavigationKey = [\"Home\", \"End\", ...ARROW_KEYS].includes(event.key);\n        if (isFocusNavigationKey) {\n          let candidateNodes = getItems().map(item => item.ref.current);\n          const prevItemKey = context.dir === \"rtl\" ? \"ArrowRight\" : \"ArrowLeft\";\n          const prevKeys = [prevItemKey, \"ArrowUp\", \"End\"];\n          if (prevKeys.includes(event.key)) candidateNodes.reverse();\n          if (ARROW_KEYS.includes(event.key)) {\n            const currentIndex = candidateNodes.indexOf(event.currentTarget);\n            candidateNodes = candidateNodes.slice(currentIndex + 1);\n          }\n          setTimeout(() => focusFirst(candidateNodes));\n          event.preventDefault();\n        }\n      })\n    })\n  });\n});\nfunction getTabbableCandidates(container) {\n  const nodes = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: node => {\n      const isHiddenInput = node.tagName === \"INPUT\" && node.type === \"hidden\";\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode);\n  return nodes;\n}\nfunction focusFirst(candidates) {\n  const previouslyFocusedElement = document.activeElement;\n  return candidates.some(candidate => {\n    if (candidate === previouslyFocusedElement) return true;\n    candidate.focus();\n    return document.activeElement !== previouslyFocusedElement;\n  });\n}\nfunction removeFromTabOrder(candidates) {\n  candidates.forEach(candidate => {\n    candidate.dataset.tabindex = candidate.getAttribute(\"tabindex\") || \"\";\n    candidate.setAttribute(\"tabindex\", \"-1\");\n  });\n  return () => {\n    candidates.forEach(candidate => {\n      const prevTabIndex = candidate.dataset.tabindex;\n      candidate.setAttribute(\"tabindex\", prevTabIndex);\n    });\n  };\n}\nfunction useResizeObserver(element, onResize) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\nfunction getOpenState(open) {\n  return open ? \"open\" : \"closed\";\n}\nfunction makeTriggerId(baseId, value) {\n  return \"\".concat(baseId, \"-trigger-\").concat(value);\n}\nfunction makeContentId(baseId, value) {\n  return \"\".concat(baseId, \"-content-\").concat(value);\n}\nfunction whenMouse(handler) {\n  return event => event.pointerType === \"mouse\" ? handler(event) : void 0;\n}\nvar Root2 = NavigationMenu;\nvar Sub = NavigationMenuSub;\nvar List = NavigationMenuList;\nvar Item = NavigationMenuItem;\nvar Trigger = NavigationMenuTrigger;\nvar Link = NavigationMenuLink;\nvar Indicator = NavigationMenuIndicator;\nvar Content = NavigationMenuContent;\nvar Viewport = NavigationMenuViewport;\nexport { Content, Indicator, Item, Link, List, NavigationMenu, NavigationMenuContent, NavigationMenuIndicator, NavigationMenuItem, NavigationMenuLink, NavigationMenuList, NavigationMenuSub, NavigationMenuTrigger, NavigationMenuViewport, Root2 as Root, Sub, Trigger, Viewport, createNavigationMenuScope };","map":{"version":3,"names":["React","ReactDOM","createContextScope","composeEventHandlers","Primitive","dispatchDiscreteCustomEvent","useControllableState","composeRefs","useComposedRefs","useDirection","Presence","useId","createCollection","DismissableLayer","usePrevious","useLayoutEffect","useCallbackRef","VisuallyHiddenPrimitive","Fragment","jsx","jsxs","NAVIGATION_MENU_NAME","Collection","useCollection","createCollectionScope","FocusGroupCollection","useFocusGroupCollection","createFocusGroupCollectionScope","createNavigationMenuContext","createNavigationMenuScope","NavigationMenuProviderImpl","useNavigationMenuContext","ViewportContentProvider","useViewportContentContext","NavigationMenu","forwardRef","props","forwardedRef","__scopeNavigationMenu","value","valueProp","onValueChange","defaultValue","delayDuration","skipDelayDuration","orientation","dir","NavigationMenuProps","navigationMenu","setNavigationMenu","useState","composedRef","node","direction","openTimerRef","useRef","closeTimerRef","skipDelayTimerRef","isOpenDelayed","setIsOpenDelayed","setValue","prop","onChange","value2","isOpen","hasSkipDelayDuration","window","clearTimeout","current","setTimeout","defaultProp","startCloseTimer","useCallback","handleOpen","itemValue","handleDelayedOpen","isOpenItem","useEffect","NavigationMenuProvider","scope","isRootMenu","rootNavigationMenu","onTriggerEnter","onTriggerLeave","onContentEnter","onContentLeave","onItemSelect","prevValue","onItemDismiss","children","nav","ref","displayName","SUB_NAME","NavigationMenuSub","subProps","context","div","viewport","setViewport","viewportContent","setViewportContent","Map","indicatorTrack","setIndicatorTrack","previousValue","baseId","onViewportChange","onIndicatorTrackChange","onViewportContentChange","contentValue","contentData","prevContent","set","onViewportContentRemove","has","delete","Provider","items","LIST_NAME","NavigationMenuList","listProps","list","ul","style","position","Slot","FocusGroup","asChild","ITEM_NAME","NavigationMenuItemContextProvider","useNavigationMenuItemContext","NavigationMenuItem","itemProps","autoValue","contentRef","triggerRef","focusProxyRef","restoreContentTabOrderRef","wasEscapeCloseRef","handleContentEntry","side","arguments","length","undefined","candidates","getTabbableCandidates","focusFirst","reverse","handleContentExit","removeFromTabOrder","onEntryKeyDown","onFocusProxyEnter","onRootContentClose","onContentFocusOutside","li","TRIGGER_NAME","NavigationMenuTrigger","disabled","triggerProps","itemContext","composedRefs","triggerId","makeTriggerId","contentId","makeContentId","hasPointerMoveOpenedRef","wasClickCloseRef","open","ItemSlot","FocusGroupItem","button","id","getOpenState","onPointerEnter","onPointerMove","whenMouse","onPointerLeave","onClick","onKeyDown","event","verticalEntryKey","entryKey","horizontal","vertical","key","preventDefault","Root","tabIndex","onFocus","content","prevFocusedElement","relatedTarget","wasTriggerFocused","wasFocusFromContent","contains","LINK_NAME","LINK_SELECT","NavigationMenuLink","active","onSelect","linkProps","a","target","linkSelectEvent","CustomEvent","bubbles","cancelable","addEventListener","event2","once","defaultPrevented","metaKey","rootContentDismissEvent","ROOT_CONTENT_DISMISS","checkForDefaultPrevented","INDICATOR_NAME","NavigationMenuIndicator","forceMount","indicatorProps","isVisible","Boolean","createPortal","present","NavigationMenuIndicatorImpl","getItems","activeTrigger","setActiveTrigger","setPosition","isHorizontal","_items$find","triggerNode","find","item","handlePositionChange","size","offsetWidth","offsetHeight","offset","offsetLeft","offsetTop","useResizeObserver","left","width","transform","concat","top","height","CONTENT_NAME","NavigationMenuContent","contentProps","commonProps","NavigationMenuContentImpl","pointerEvents","ViewportContentMounter","prevMotionAttributeRef","handleClose","_triggerRef$current","document","activeElement","focus","removeEventListener","motionAttribute","useMemo","values","map","index","indexOf","prevIndex","isSelected","wasSelected","attribute","disableOutsidePointerEvents","onDismiss","_ref$current","Event","dispatchEvent","onFocusOutside","_context$rootNavigati","onPointerDownOutside","_context$viewport","isTrigger","some","_item$ref$current","isRootViewport","isMetaKey","altKey","ctrlKey","isTabKey","currentTarget","focusedElement","findIndex","candidate","isMovingBackwards","shiftKey","nextCandidates","slice","_focusProxyRef$curren","onEscapeKeyDown","VIEWPORT_NAME","NavigationMenuViewport","viewportProps","NavigationMenuViewportImpl","viewportImplProps","viewportContentContext","setSize","setContent","viewportWidth","viewportHeight","activeContentValue","handleSizeChange","Array","from","_ref","props2","isActive","FOCUS_GROUP_NAME","groupProps","ARROW_KEYS","FOCUS_GROUP_ITEM_NAME","isFocusNavigationKey","includes","candidateNodes","prevItemKey","prevKeys","currentIndex","container","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","isHiddenInput","tagName","type","hidden","FILTER_SKIP","FILTER_ACCEPT","nextNode","push","currentNode","previouslyFocusedElement","forEach","dataset","tabindex","getAttribute","setAttribute","prevTabIndex","element","onResize","handleResize","rAF","resizeObserver","ResizeObserver","cancelAnimationFrame","requestAnimationFrame","observe","unobserve","handler","pointerType","Root2","Sub","List","Item","Trigger","Link","Indicator","Content","Viewport"],"sources":["C:\\Users\\saweb\\noaa-weather-app\\node_modules\\@radix-ui\\react-navigation-menu\\src\\NavigationMenu.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { composeRefs, useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Orientation = 'vertical' | 'horizontal';\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAVIGATION_MENU_NAME = 'NavigationMenu';\n\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  NavigationMenuTriggerElement,\n  { value: string }\n>(NAVIGATION_MENU_NAME);\n\nconst [FocusGroupCollection, useFocusGroupCollection, createFocusGroupCollectionScope] =\n  createCollection<FocusGroupItemElement, {}>(NAVIGATION_MENU_NAME);\n\ntype ScopedProps<P> = P & { __scopeNavigationMenu?: Scope };\nconst [createNavigationMenuContext, createNavigationMenuScope] = createContextScope(\n  NAVIGATION_MENU_NAME,\n  [createCollectionScope, createFocusGroupCollectionScope]\n);\n\ntype ContentData = {\n  ref?: React.Ref<ViewportContentMounterElement>;\n} & ViewportContentMounterProps;\n\ntype NavigationMenuContextValue = {\n  isRootMenu: boolean;\n  value: string;\n  previousValue: string;\n  baseId: string;\n  dir: Direction;\n  orientation: Orientation;\n  rootNavigationMenu: NavigationMenuElement | null;\n  indicatorTrack: HTMLDivElement | null;\n  onIndicatorTrackChange(indicatorTrack: HTMLDivElement | null): void;\n  viewport: NavigationMenuViewportElement | null;\n  onViewportChange(viewport: NavigationMenuViewportElement | null): void;\n  onViewportContentChange(contentValue: string, contentData: ContentData): void;\n  onViewportContentRemove(contentValue: string): void;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave(): void;\n  onContentEnter(): void;\n  onContentLeave(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n};\n\nconst [NavigationMenuProviderImpl, useNavigationMenuContext] =\n  createNavigationMenuContext<NavigationMenuContextValue>(NAVIGATION_MENU_NAME);\n\nconst [ViewportContentProvider, useViewportContentContext] = createNavigationMenuContext<{\n  items: Map<string, ContentData>;\n}>(NAVIGATION_MENU_NAME);\n\ntype NavigationMenuElement = React.ElementRef<typeof Primitive.nav>;\ntype PrimitiveNavProps = React.ComponentPropsWithoutRef<typeof Primitive.nav>;\ninterface NavigationMenuProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveNavProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  dir?: Direction;\n  orientation?: Orientation;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened.\n   * @defaultValue 200\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n}\n\nconst NavigationMenu = React.forwardRef<NavigationMenuElement, NavigationMenuProps>(\n  (props: ScopedProps<NavigationMenuProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      delayDuration = 200,\n      skipDelayDuration = 300,\n      orientation = 'horizontal',\n      dir,\n      ...NavigationMenuProps\n    } = props;\n    const [navigationMenu, setNavigationMenu] = React.useState<NavigationMenuElement | null>(null);\n    const composedRef = useComposedRefs(forwardedRef, (node) => setNavigationMenu(node));\n    const direction = useDirection(dir);\n    const openTimerRef = React.useRef(0);\n    const closeTimerRef = React.useRef(0);\n    const skipDelayTimerRef = React.useRef(0);\n    const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: (value) => {\n        const isOpen = value !== '';\n        const hasSkipDelayDuration = skipDelayDuration > 0;\n\n        if (isOpen) {\n          window.clearTimeout(skipDelayTimerRef.current);\n          if (hasSkipDelayDuration) setIsOpenDelayed(false);\n        } else {\n          window.clearTimeout(skipDelayTimerRef.current);\n          skipDelayTimerRef.current = window.setTimeout(\n            () => setIsOpenDelayed(true),\n            skipDelayDuration\n          );\n        }\n\n        onValueChange?.(value);\n      },\n      defaultProp: defaultValue,\n    });\n\n    const startCloseTimer = React.useCallback(() => {\n      window.clearTimeout(closeTimerRef.current);\n      closeTimerRef.current = window.setTimeout(() => setValue(''), 150);\n    }, [setValue]);\n\n    const handleOpen = React.useCallback(\n      (itemValue: string) => {\n        window.clearTimeout(closeTimerRef.current);\n        setValue(itemValue);\n      },\n      [setValue]\n    );\n\n    const handleDelayedOpen = React.useCallback(\n      (itemValue: string) => {\n        const isOpenItem = value === itemValue;\n        if (isOpenItem) {\n          // If the item is already open (e.g. we're transitioning from the content to the trigger)\n          // then we want to clear the close timer immediately.\n          window.clearTimeout(closeTimerRef.current);\n        } else {\n          openTimerRef.current = window.setTimeout(() => {\n            window.clearTimeout(closeTimerRef.current);\n            setValue(itemValue);\n          }, delayDuration);\n        }\n      },\n      [value, setValue, delayDuration]\n    );\n\n    React.useEffect(() => {\n      return () => {\n        window.clearTimeout(openTimerRef.current);\n        window.clearTimeout(closeTimerRef.current);\n        window.clearTimeout(skipDelayTimerRef.current);\n      };\n    }, []);\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={true}\n        value={value}\n        dir={direction}\n        orientation={orientation}\n        rootNavigationMenu={navigationMenu}\n        onTriggerEnter={(itemValue) => {\n          window.clearTimeout(openTimerRef.current);\n          if (isOpenDelayed) handleDelayedOpen(itemValue);\n          else handleOpen(itemValue);\n        }}\n        onTriggerLeave={() => {\n          window.clearTimeout(openTimerRef.current);\n          startCloseTimer();\n        }}\n        onContentEnter={() => window.clearTimeout(closeTimerRef.current)}\n        onContentLeave={startCloseTimer}\n        onItemSelect={(itemValue) => {\n          setValue((prevValue) => (prevValue === itemValue ? '' : itemValue));\n        }}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.nav\n          aria-label=\"Main\"\n          data-orientation={orientation}\n          dir={direction}\n          {...NavigationMenuProps}\n          ref={composedRef}\n        />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenu.displayName = NAVIGATION_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'NavigationMenuSub';\n\ntype NavigationMenuSubElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface NavigationMenuSubProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveDivProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  orientation?: Orientation;\n}\n\nconst NavigationMenuSub = React.forwardRef<NavigationMenuSubElement, NavigationMenuSubProps>(\n  (props: ScopedProps<NavigationMenuSubProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      orientation = 'horizontal',\n      ...subProps\n    } = props;\n    const context = useNavigationMenuContext(SUB_NAME, __scopeNavigationMenu);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue,\n    });\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={false}\n        value={value}\n        dir={context.dir}\n        orientation={orientation}\n        rootNavigationMenu={context.rootNavigationMenu}\n        onTriggerEnter={(itemValue) => setValue(itemValue)}\n        onItemSelect={(itemValue) => setValue(itemValue)}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.div data-orientation={orientation} {...subProps} ref={forwardedRef} />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenuSub.displayName = SUB_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ninterface NavigationMenuProviderPrivateProps {\n  isRootMenu: boolean;\n  scope: Scope;\n  children: React.ReactNode;\n  orientation: Orientation;\n  dir: Direction;\n  rootNavigationMenu: NavigationMenuElement | null;\n  value: string;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave?(): void;\n  onContentEnter?(): void;\n  onContentLeave?(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n}\n\ninterface NavigationMenuProviderProps extends NavigationMenuProviderPrivateProps {}\n\nconst NavigationMenuProvider: React.FC<NavigationMenuProviderProps> = (\n  props: ScopedProps<NavigationMenuProviderProps>\n) => {\n  const {\n    scope,\n    isRootMenu,\n    rootNavigationMenu,\n    dir,\n    orientation,\n    children,\n    value,\n    onItemSelect,\n    onItemDismiss,\n    onTriggerEnter,\n    onTriggerLeave,\n    onContentEnter,\n    onContentLeave,\n  } = props;\n  const [viewport, setViewport] = React.useState<NavigationMenuViewportElement | null>(null);\n  const [viewportContent, setViewportContent] = React.useState<Map<string, ContentData>>(new Map());\n  const [indicatorTrack, setIndicatorTrack] = React.useState<HTMLDivElement | null>(null);\n\n  return (\n    <NavigationMenuProviderImpl\n      scope={scope}\n      isRootMenu={isRootMenu}\n      rootNavigationMenu={rootNavigationMenu}\n      value={value}\n      previousValue={usePrevious(value)}\n      baseId={useId()}\n      dir={dir}\n      orientation={orientation}\n      viewport={viewport}\n      onViewportChange={setViewport}\n      indicatorTrack={indicatorTrack}\n      onIndicatorTrackChange={setIndicatorTrack}\n      onTriggerEnter={useCallbackRef(onTriggerEnter)}\n      onTriggerLeave={useCallbackRef(onTriggerLeave)}\n      onContentEnter={useCallbackRef(onContentEnter)}\n      onContentLeave={useCallbackRef(onContentLeave)}\n      onItemSelect={useCallbackRef(onItemSelect)}\n      onItemDismiss={useCallbackRef(onItemDismiss)}\n      onViewportContentChange={React.useCallback((contentValue, contentData) => {\n        setViewportContent((prevContent) => {\n          prevContent.set(contentValue, contentData);\n          return new Map(prevContent);\n        });\n      }, [])}\n      onViewportContentRemove={React.useCallback((contentValue) => {\n        setViewportContent((prevContent) => {\n          if (!prevContent.has(contentValue)) return prevContent;\n          prevContent.delete(contentValue);\n          return new Map(prevContent);\n        });\n      }, [])}\n    >\n      <Collection.Provider scope={scope}>\n        <ViewportContentProvider scope={scope} items={viewportContent}>\n          {children}\n        </ViewportContentProvider>\n      </Collection.Provider>\n    </NavigationMenuProviderImpl>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nconst LIST_NAME = 'NavigationMenuList';\n\ntype NavigationMenuListElement = React.ElementRef<typeof Primitive.ul>;\ntype PrimitiveUnorderedListProps = React.ComponentPropsWithoutRef<typeof Primitive.ul>;\ninterface NavigationMenuListProps extends PrimitiveUnorderedListProps {}\n\nconst NavigationMenuList = React.forwardRef<NavigationMenuListElement, NavigationMenuListProps>(\n  (props: ScopedProps<NavigationMenuListProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...listProps } = props;\n    const context = useNavigationMenuContext(LIST_NAME, __scopeNavigationMenu);\n\n    const list = (\n      <Primitive.ul data-orientation={context.orientation} {...listProps} ref={forwardedRef} />\n    );\n\n    return (\n      <Primitive.div style={{ position: 'relative' }} ref={context.onIndicatorTrackChange}>\n        <Collection.Slot scope={__scopeNavigationMenu}>\n          {context.isRootMenu ? <FocusGroup asChild>{list}</FocusGroup> : list}\n        </Collection.Slot>\n      </Primitive.div>\n    );\n  }\n);\n\nNavigationMenuList.displayName = LIST_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'NavigationMenuItem';\n\ntype FocusProxyElement = React.ElementRef<typeof VisuallyHiddenPrimitive.Root>;\n\ntype NavigationMenuItemContextValue = {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement>;\n  contentRef: React.RefObject<NavigationMenuContentElement>;\n  focusProxyRef: React.RefObject<FocusProxyElement>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onEntryKeyDown(): void;\n  onFocusProxyEnter(side: 'start' | 'end'): void;\n  onRootContentClose(): void;\n  onContentFocusOutside(): void;\n};\n\nconst [NavigationMenuItemContextProvider, useNavigationMenuItemContext] =\n  createNavigationMenuContext<NavigationMenuItemContextValue>(ITEM_NAME);\n\ntype NavigationMenuItemElement = React.ElementRef<typeof Primitive.li>;\ntype PrimitiveListItemProps = React.ComponentPropsWithoutRef<typeof Primitive.li>;\ninterface NavigationMenuItemProps extends PrimitiveListItemProps {\n  value?: string;\n}\n\nconst NavigationMenuItem = React.forwardRef<NavigationMenuItemElement, NavigationMenuItemProps>(\n  (props: ScopedProps<NavigationMenuItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, value: valueProp, ...itemProps } = props;\n    const autoValue = useId();\n    // We need to provide an initial deterministic value as `useId` will return\n    // empty string on the first render and we don't want to match our internal \"closed\" value.\n    const value = valueProp || autoValue || 'LEGACY_REACT_AUTO_VALUE';\n    const contentRef = React.useRef<NavigationMenuContentElement>(null);\n    const triggerRef = React.useRef<NavigationMenuTriggerElement>(null);\n    const focusProxyRef = React.useRef<FocusProxyElement>(null);\n    const restoreContentTabOrderRef = React.useRef(() => {});\n    const wasEscapeCloseRef = React.useRef(false);\n\n    const handleContentEntry = React.useCallback((side = 'start') => {\n      if (contentRef.current) {\n        restoreContentTabOrderRef.current();\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) focusFirst(side === 'start' ? candidates : candidates.reverse());\n      }\n    }, []);\n\n    const handleContentExit = React.useCallback(() => {\n      if (contentRef.current) {\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) restoreContentTabOrderRef.current = removeFromTabOrder(candidates);\n      }\n    }, []);\n\n    return (\n      <NavigationMenuItemContextProvider\n        scope={__scopeNavigationMenu}\n        value={value}\n        triggerRef={triggerRef}\n        contentRef={contentRef}\n        focusProxyRef={focusProxyRef}\n        wasEscapeCloseRef={wasEscapeCloseRef}\n        onEntryKeyDown={handleContentEntry}\n        onFocusProxyEnter={handleContentEntry}\n        onRootContentClose={handleContentExit}\n        onContentFocusOutside={handleContentExit}\n      >\n        <Primitive.li {...itemProps} ref={forwardedRef} />\n      </NavigationMenuItemContextProvider>\n    );\n  }\n);\n\nNavigationMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'NavigationMenuTrigger';\n\ntype NavigationMenuTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface NavigationMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst NavigationMenuTrigger = React.forwardRef<\n  NavigationMenuTriggerElement,\n  NavigationMenuTriggerProps\n>((props: ScopedProps<NavigationMenuTriggerProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, disabled, ...triggerProps } = props;\n  const context = useNavigationMenuContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuTriggerElement>(null);\n  const composedRefs = useComposedRefs(ref, itemContext.triggerRef, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, itemContext.value);\n  const contentId = makeContentId(context.baseId, itemContext.value);\n  const hasPointerMoveOpenedRef = React.useRef(false);\n  const wasClickCloseRef = React.useRef(false);\n  const open = itemContext.value === context.value;\n\n  return (\n    <>\n      <Collection.ItemSlot scope={__scopeNavigationMenu} value={itemContext.value}>\n        <FocusGroupItem asChild>\n          <Primitive.button\n            id={triggerId}\n            disabled={disabled}\n            data-disabled={disabled ? '' : undefined}\n            data-state={getOpenState(open)}\n            aria-expanded={open}\n            aria-controls={contentId}\n            {...triggerProps}\n            ref={composedRefs}\n            onPointerEnter={composeEventHandlers(props.onPointerEnter, () => {\n              wasClickCloseRef.current = false;\n              itemContext.wasEscapeCloseRef.current = false;\n            })}\n            onPointerMove={composeEventHandlers(\n              props.onPointerMove,\n              whenMouse(() => {\n                if (\n                  disabled ||\n                  wasClickCloseRef.current ||\n                  itemContext.wasEscapeCloseRef.current ||\n                  hasPointerMoveOpenedRef.current\n                )\n                  return;\n                context.onTriggerEnter(itemContext.value);\n                hasPointerMoveOpenedRef.current = true;\n              })\n            )}\n            onPointerLeave={composeEventHandlers(\n              props.onPointerLeave,\n              whenMouse(() => {\n                if (disabled) return;\n                context.onTriggerLeave();\n                hasPointerMoveOpenedRef.current = false;\n              })\n            )}\n            onClick={composeEventHandlers(props.onClick, () => {\n              context.onItemSelect(itemContext.value);\n              wasClickCloseRef.current = open;\n            })}\n            onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n              const verticalEntryKey = context.dir === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n              const entryKey = { horizontal: 'ArrowDown', vertical: verticalEntryKey }[\n                context.orientation\n              ];\n              if (open && event.key === entryKey) {\n                itemContext.onEntryKeyDown();\n                // Prevent FocusGroupItem from handling the event\n                event.preventDefault();\n              }\n            })}\n          />\n        </FocusGroupItem>\n      </Collection.ItemSlot>\n\n      {/* Proxy tab order between trigger and content */}\n      {open && (\n        <>\n          <VisuallyHiddenPrimitive.Root\n            aria-hidden\n            tabIndex={0}\n            ref={itemContext.focusProxyRef}\n            onFocus={(event) => {\n              const content = itemContext.contentRef.current;\n              const prevFocusedElement = event.relatedTarget as HTMLElement | null;\n              const wasTriggerFocused = prevFocusedElement === ref.current;\n              const wasFocusFromContent = content?.contains(prevFocusedElement);\n\n              if (wasTriggerFocused || !wasFocusFromContent) {\n                itemContext.onFocusProxyEnter(wasTriggerFocused ? 'start' : 'end');\n              }\n            }}\n          />\n\n          {/* Restructure a11y tree to make content accessible to screen reader when using the viewport */}\n          {context.viewport && <span aria-owns={contentId} />}\n        </>\n      )}\n    </>\n  );\n});\n\nNavigationMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuLink\n * -----------------------------------------------------------------------------------------------*/\n\nconst LINK_NAME = 'NavigationMenuLink';\nconst LINK_SELECT = 'navigationMenu.linkSelect';\n\ntype NavigationMenuLinkElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = React.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface NavigationMenuLinkProps extends Omit<PrimitiveLinkProps, 'onSelect'> {\n  active?: boolean;\n  onSelect?: (event: Event) => void;\n}\n\nconst NavigationMenuLink = React.forwardRef<NavigationMenuLinkElement, NavigationMenuLinkProps>(\n  (props: ScopedProps<NavigationMenuLinkProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, active, onSelect, ...linkProps } = props;\n\n    return (\n      <FocusGroupItem asChild>\n        <Primitive.a\n          data-active={active ? '' : undefined}\n          aria-current={active ? 'page' : undefined}\n          {...linkProps}\n          ref={forwardedRef}\n          onClick={composeEventHandlers(\n            props.onClick,\n            (event) => {\n              const target = event.target as HTMLElement;\n              const linkSelectEvent = new CustomEvent(LINK_SELECT, {\n                bubbles: true,\n                cancelable: true,\n              });\n              target.addEventListener(LINK_SELECT, (event) => onSelect?.(event), { once: true });\n              dispatchDiscreteCustomEvent(target, linkSelectEvent);\n\n              if (!linkSelectEvent.defaultPrevented && !event.metaKey) {\n                const rootContentDismissEvent = new CustomEvent(ROOT_CONTENT_DISMISS, {\n                  bubbles: true,\n                  cancelable: true,\n                });\n                dispatchDiscreteCustomEvent(target, rootContentDismissEvent);\n              }\n            },\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </FocusGroupItem>\n    );\n  }\n);\n\nNavigationMenuLink.displayName = LINK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'NavigationMenuIndicator';\n\ntype NavigationMenuIndicatorElement = NavigationMenuIndicatorImplElement;\ninterface NavigationMenuIndicatorProps extends NavigationMenuIndicatorImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuIndicator = React.forwardRef<\n  NavigationMenuIndicatorElement,\n  NavigationMenuIndicatorProps\n>((props: ScopedProps<NavigationMenuIndicatorProps>, forwardedRef) => {\n  const { forceMount, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, props.__scopeNavigationMenu);\n  const isVisible = Boolean(context.value);\n\n  return context.indicatorTrack\n    ? ReactDOM.createPortal(\n        <Presence present={forceMount || isVisible}>\n          <NavigationMenuIndicatorImpl {...indicatorProps} ref={forwardedRef} />\n        </Presence>,\n        context.indicatorTrack\n      )\n    : null;\n});\n\nNavigationMenuIndicator.displayName = INDICATOR_NAME;\n\ntype NavigationMenuIndicatorImplElement = React.ElementRef<typeof Primitive.div>;\ninterface NavigationMenuIndicatorImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuIndicatorImpl = React.forwardRef<\n  NavigationMenuIndicatorImplElement,\n  NavigationMenuIndicatorImplProps\n>((props: ScopedProps<NavigationMenuIndicatorImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, __scopeNavigationMenu);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const [activeTrigger, setActiveTrigger] = React.useState<NavigationMenuTriggerElement | null>(\n    null\n  );\n  const [position, setPosition] = React.useState<{ size: number; offset: number } | null>(null);\n  const isHorizontal = context.orientation === 'horizontal';\n  const isVisible = Boolean(context.value);\n\n  React.useEffect(() => {\n    const items = getItems();\n    const triggerNode = items.find((item) => item.value === context.value)?.ref.current;\n    if (triggerNode) setActiveTrigger(triggerNode);\n  }, [getItems, context.value]);\n\n  /**\n   * Update position when the indicator or parent track size changes\n   */\n  const handlePositionChange = () => {\n    if (activeTrigger) {\n      setPosition({\n        size: isHorizontal ? activeTrigger.offsetWidth : activeTrigger.offsetHeight,\n        offset: isHorizontal ? activeTrigger.offsetLeft : activeTrigger.offsetTop,\n      });\n    }\n  };\n  useResizeObserver(activeTrigger, handlePositionChange);\n  useResizeObserver(context.indicatorTrack, handlePositionChange);\n\n  // We need to wait for the indicator position to be available before rendering to\n  // snap immediately into position rather than transitioning from initial\n  return position ? (\n    <Primitive.div\n      aria-hidden\n      data-state={isVisible ? 'visible' : 'hidden'}\n      data-orientation={context.orientation}\n      {...indicatorProps}\n      ref={forwardedRef}\n      style={{\n        position: 'absolute',\n        ...(isHorizontal\n          ? {\n              left: 0,\n              width: position.size + 'px',\n              transform: `translateX(${position.offset}px)`,\n            }\n          : {\n              top: 0,\n              height: position.size + 'px',\n              transform: `translateY(${position.offset}px)`,\n            }),\n        ...indicatorProps.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'NavigationMenuContent';\n\ntype NavigationMenuContentElement = NavigationMenuContentImplElement;\ninterface NavigationMenuContentProps\n  extends Omit<NavigationMenuContentImplProps, keyof NavigationMenuContentImplPrivateProps> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuContent = React.forwardRef<\n  NavigationMenuContentElement,\n  NavigationMenuContentProps\n>((props: ScopedProps<NavigationMenuContentProps>, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const composedRefs = useComposedRefs(itemContext.contentRef, forwardedRef);\n  const open = itemContext.value === context.value;\n\n  const commonProps = {\n    value: itemContext.value,\n    triggerRef: itemContext.triggerRef,\n    focusProxyRef: itemContext.focusProxyRef,\n    wasEscapeCloseRef: itemContext.wasEscapeCloseRef,\n    onContentFocusOutside: itemContext.onContentFocusOutside,\n    onRootContentClose: itemContext.onRootContentClose,\n    ...contentProps,\n  };\n\n  return !context.viewport ? (\n    <Presence present={forceMount || open}>\n      <NavigationMenuContentImpl\n        data-state={getOpenState(open)}\n        {...commonProps}\n        ref={composedRefs}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n        onPointerLeave={composeEventHandlers(\n          props.onPointerLeave,\n          whenMouse(context.onContentLeave)\n        )}\n        style={{\n          // Prevent interaction when animating out\n          pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n          ...commonProps.style,\n        }}\n      />\n    </Presence>\n  ) : (\n    <ViewportContentMounter forceMount={forceMount} {...commonProps} ref={composedRefs} />\n  );\n});\n\nNavigationMenuContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ViewportContentMounterElement = NavigationMenuContentImplElement;\ninterface ViewportContentMounterProps extends NavigationMenuContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ViewportContentMounter = React.forwardRef<\n  ViewportContentMounterElement,\n  ViewportContentMounterProps\n>((props: ScopedProps<ViewportContentMounterProps>, forwardedRef) => {\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const { onViewportContentChange, onViewportContentRemove } = context;\n\n  useLayoutEffect(() => {\n    onViewportContentChange(props.value, {\n      ref: forwardedRef,\n      ...props,\n    });\n  }, [props, forwardedRef, onViewportContentChange]);\n\n  useLayoutEffect(() => {\n    return () => onViewportContentRemove(props.value);\n  }, [props.value, onViewportContentRemove]);\n\n  // Content is proxied into the viewport\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_CONTENT_DISMISS = 'navigationMenu.rootContentDismiss';\n\ntype MotionAttribute = 'to-start' | 'to-end' | 'from-start' | 'from-end';\ntype NavigationMenuContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\n\ninterface NavigationMenuContentImplPrivateProps {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement>;\n  focusProxyRef: React.RefObject<FocusProxyElement>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onContentFocusOutside(): void;\n  onRootContentClose(): void;\n}\ninterface NavigationMenuContentImplProps\n  extends Omit<DismissableLayerProps, 'onDismiss' | 'disableOutsidePointerEvents'>,\n    NavigationMenuContentImplPrivateProps {}\n\nconst NavigationMenuContentImpl = React.forwardRef<\n  NavigationMenuContentImplElement,\n  NavigationMenuContentImplProps\n>((props: ScopedProps<NavigationMenuContentImplProps>, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value,\n    triggerRef,\n    focusProxyRef,\n    wasEscapeCloseRef,\n    onRootContentClose,\n    onContentFocusOutside,\n    ...contentProps\n  } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, __scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuContentImplElement>(null);\n  const composedRefs = useComposedRefs(ref, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const prevMotionAttributeRef = React.useRef<MotionAttribute | null>(null);\n\n  const { onItemDismiss } = context;\n\n  React.useEffect(() => {\n    const content = ref.current;\n\n    // Bubble dismiss to the root content node and focus its trigger\n    if (context.isRootMenu && content) {\n      const handleClose = () => {\n        onItemDismiss();\n        onRootContentClose();\n        if (content.contains(document.activeElement)) triggerRef.current?.focus();\n      };\n      content.addEventListener(ROOT_CONTENT_DISMISS, handleClose);\n      return () => content.removeEventListener(ROOT_CONTENT_DISMISS, handleClose);\n    }\n  }, [context.isRootMenu, props.value, triggerRef, onItemDismiss, onRootContentClose]);\n\n  const motionAttribute = React.useMemo(() => {\n    const items = getItems();\n    const values = items.map((item) => item.value);\n    if (context.dir === 'rtl') values.reverse();\n    const index = values.indexOf(context.value);\n    const prevIndex = values.indexOf(context.previousValue);\n    const isSelected = value === context.value;\n    const wasSelected = prevIndex === values.indexOf(value);\n\n    // We only want to update selected and the last selected content\n    // this avoids animations being interrupted outside of that range\n    if (!isSelected && !wasSelected) return prevMotionAttributeRef.current;\n\n    const attribute = (() => {\n      // Don't provide a direction on the initial open\n      if (index !== prevIndex) {\n        // If we're moving to this item from another\n        if (isSelected && prevIndex !== -1) return index > prevIndex ? 'from-end' : 'from-start';\n        // If we're leaving this item for another\n        if (wasSelected && index !== -1) return index > prevIndex ? 'to-start' : 'to-end';\n      }\n      // Otherwise we're entering from closed or leaving the list\n      // entirely and should not animate in any direction\n      return null;\n    })();\n\n    prevMotionAttributeRef.current = attribute;\n    return attribute;\n  }, [context.previousValue, context.value, context.dir, getItems, value]);\n\n  return (\n    <FocusGroup asChild>\n      <DismissableLayer\n        id={contentId}\n        aria-labelledby={triggerId}\n        data-motion={motionAttribute}\n        data-orientation={context.orientation}\n        {...contentProps}\n        ref={composedRefs}\n        disableOutsidePointerEvents={false}\n        onDismiss={() => {\n          const rootContentDismissEvent = new Event(ROOT_CONTENT_DISMISS, {\n            bubbles: true,\n            cancelable: true,\n          });\n          ref.current?.dispatchEvent(rootContentDismissEvent);\n        }}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n          onContentFocusOutside();\n          const target = event.target as HTMLElement;\n          // Only dismiss content when focus moves outside of the menu\n          if (context.rootNavigationMenu?.contains(target)) event.preventDefault();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const target = event.target as HTMLElement;\n          const isTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          const isRootViewport = context.isRootMenu && context.viewport?.contains(target);\n          if (isTrigger || isRootViewport || !context.isRootMenu) event.preventDefault();\n        })}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;\n          const isTabKey = event.key === 'Tab' && !isMetaKey;\n          if (isTabKey) {\n            const candidates = getTabbableCandidates(event.currentTarget);\n            const focusedElement = document.activeElement;\n            const index = candidates.findIndex((candidate) => candidate === focusedElement);\n            const isMovingBackwards = event.shiftKey;\n            const nextCandidates = isMovingBackwards\n              ? candidates.slice(0, index).reverse()\n              : candidates.slice(index + 1, candidates.length);\n\n            if (focusFirst(nextCandidates)) {\n              // prevent browser tab keydown because we've handled focus\n              event.preventDefault();\n            } else {\n              // If we can't focus that means we're at the edges\n              // so focus the proxy and let browser handle\n              // tab/shift+tab keypress on the proxy instead\n              focusProxyRef.current?.focus();\n            }\n          }\n        })}\n        onEscapeKeyDown={composeEventHandlers(props.onEscapeKeyDown, (event) => {\n          // prevent the dropdown from reopening\n          // after the escape key has been pressed\n          wasEscapeCloseRef.current = true;\n        })}\n      />\n    </FocusGroup>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'NavigationMenuViewport';\n\ntype NavigationMenuViewportElement = NavigationMenuViewportImplElement;\ninterface NavigationMenuViewportProps\n  extends Omit<NavigationMenuViewportImplProps, 'children' | 'activeContentValue'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuViewport = React.forwardRef<\n  NavigationMenuViewportElement,\n  NavigationMenuViewportProps\n>((props: ScopedProps<NavigationMenuViewportProps>, forwardedRef) => {\n  const { forceMount, ...viewportProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, props.__scopeNavigationMenu);\n  const open = Boolean(context.value);\n\n  return (\n    <Presence present={forceMount || open}>\n      <NavigationMenuViewportImpl {...viewportProps} ref={forwardedRef} />\n    </Presence>\n  );\n});\n\nNavigationMenuViewport.displayName = VIEWPORT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype NavigationMenuViewportImplElement = React.ElementRef<typeof Primitive.div>;\ninterface NavigationMenuViewportImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuViewportImpl = React.forwardRef<\n  NavigationMenuViewportImplElement,\n  NavigationMenuViewportImplProps\n>((props: ScopedProps<NavigationMenuViewportImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, children, ...viewportImplProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, __scopeNavigationMenu);\n  const composedRefs = useComposedRefs(forwardedRef, context.onViewportChange);\n  const viewportContentContext = useViewportContentContext(\n    CONTENT_NAME,\n    props.__scopeNavigationMenu\n  );\n  const [size, setSize] = React.useState<{ width: number; height: number } | null>(null);\n  const [content, setContent] = React.useState<NavigationMenuContentElement | null>(null);\n  const viewportWidth = size ? size?.width + 'px' : undefined;\n  const viewportHeight = size ? size?.height + 'px' : undefined;\n  const open = Boolean(context.value);\n  // We persist the last active content value as the viewport may be animating out\n  // and we want the content to remain mounted for the lifecycle of the viewport.\n  const activeContentValue = open ? context.value : context.previousValue;\n\n  /**\n   * Update viewport size to match the active content node.\n   * We prefer offset dimensions over `getBoundingClientRect` as the latter respects CSS transform.\n   * For example, if content animates in from `scale(0.5)` the dimensions would be anything\n   * from `0.5` to `1` of the intended size.\n   */\n  const handleSizeChange = () => {\n    if (content) setSize({ width: content.offsetWidth, height: content.offsetHeight });\n  };\n  useResizeObserver(content, handleSizeChange);\n\n  return (\n    <Primitive.div\n      data-state={getOpenState(open)}\n      data-orientation={context.orientation}\n      {...viewportImplProps}\n      ref={composedRefs}\n      style={{\n        // Prevent interaction when animating out\n        pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n        ['--radix-navigation-menu-viewport-width' as any]: viewportWidth,\n        ['--radix-navigation-menu-viewport-height' as any]: viewportHeight,\n        ...viewportImplProps.style,\n      }}\n      onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n      onPointerLeave={composeEventHandlers(props.onPointerLeave, whenMouse(context.onContentLeave))}\n    >\n      {Array.from(viewportContentContext.items).map(([value, { ref, forceMount, ...props }]) => {\n        const isActive = activeContentValue === value;\n        return (\n          <Presence key={value} present={forceMount || isActive}>\n            <NavigationMenuContentImpl\n              {...props}\n              ref={composeRefs(ref, (node) => {\n                // We only want to update the stored node when another is available\n                // as we need to smoothly transition between them.\n                if (isActive && node) setContent(node);\n              })}\n            />\n          </Presence>\n        );\n      })}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst FOCUS_GROUP_NAME = 'FocusGroup';\n\ntype FocusGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface FocusGroupProps extends PrimitiveDivProps {}\n\nconst FocusGroup = React.forwardRef<FocusGroupElement, FocusGroupProps>(\n  (props: ScopedProps<FocusGroupProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const context = useNavigationMenuContext(FOCUS_GROUP_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.Provider scope={__scopeNavigationMenu}>\n        <FocusGroupCollection.Slot scope={__scopeNavigationMenu}>\n          <Primitive.div dir={context.dir} {...groupProps} ref={forwardedRef} />\n        </FocusGroupCollection.Slot>\n      </FocusGroupCollection.Provider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_KEYS = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'];\nconst FOCUS_GROUP_ITEM_NAME = 'FocusGroupItem';\n\ntype FocusGroupItemElement = React.ElementRef<typeof Primitive.button>;\ninterface FocusGroupItemProps extends PrimitiveButtonProps {}\n\nconst FocusGroupItem = React.forwardRef<FocusGroupItemElement, FocusGroupItemProps>(\n  (props: ScopedProps<FocusGroupItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const getItems = useFocusGroupCollection(__scopeNavigationMenu);\n    const context = useNavigationMenuContext(FOCUS_GROUP_ITEM_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.ItemSlot scope={__scopeNavigationMenu}>\n        <Primitive.button\n          {...groupProps}\n          ref={forwardedRef}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            const isFocusNavigationKey = ['Home', 'End', ...ARROW_KEYS].includes(event.key);\n            if (isFocusNavigationKey) {\n              let candidateNodes = getItems().map((item) => item.ref.current!);\n              const prevItemKey = context.dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n              const prevKeys = [prevItemKey, 'ArrowUp', 'End'];\n              if (prevKeys.includes(event.key)) candidateNodes.reverse();\n              if (ARROW_KEYS.includes(event.key)) {\n                const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                candidateNodes = candidateNodes.slice(currentIndex + 1);\n              }\n              /**\n               * Imperative focus during keydown is risky so we prevent React's batching updates\n               * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n               */\n              setTimeout(() => focusFirst(candidateNodes));\n\n              // Prevent page scroll while navigating\n              event.preventDefault();\n            }\n          })}\n        />\n      </FocusGroupCollection.ItemSlot>\n    );\n  }\n);\n\n/**\n * Returns a list of potential tabbable candidates.\n *\n * NOTE: This is only a close approximation. For example it doesn't take into account cases like when\n * elements are not visible. This cannot be worked out easily by just reading a property, but rather\n * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1\n */\nfunction getTabbableCandidates(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  // we do not take into account the order of nodes with positive `tabIndex` as it\n  // hinders accessibility to have tab order different from visual order.\n  return nodes;\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const previouslyFocusedElement = document.activeElement;\n  return candidates.some((candidate) => {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === previouslyFocusedElement) return true;\n    candidate.focus();\n    return document.activeElement !== previouslyFocusedElement;\n  });\n}\n\nfunction removeFromTabOrder(candidates: HTMLElement[]) {\n  candidates.forEach((candidate) => {\n    candidate.dataset.tabindex = candidate.getAttribute('tabindex') || '';\n    candidate.setAttribute('tabindex', '-1');\n  });\n  return () => {\n    candidates.forEach((candidate) => {\n      const prevTabIndex = candidate.dataset.tabindex as string;\n      candidate.setAttribute('tabindex', prevTabIndex);\n    });\n  };\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\nfunction getOpenState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction makeTriggerId(baseId: string, value: string) {\n  return `${baseId}-trigger-${value}`;\n}\n\nfunction makeContentId(baseId: string, value: string) {\n  return `${baseId}-content-${value}`;\n}\n\nfunction whenMouse<E>(handler: React.PointerEventHandler<E>): React.PointerEventHandler<E> {\n  return (event) => (event.pointerType === 'mouse' ? handler(event) : undefined);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = NavigationMenu;\nconst Sub = NavigationMenuSub;\nconst List = NavigationMenuList;\nconst Item = NavigationMenuItem;\nconst Trigger = NavigationMenuTrigger;\nconst Link = NavigationMenuLink;\nconst Indicator = NavigationMenuIndicator;\nconst Content = NavigationMenuContent;\nconst Viewport = NavigationMenuViewport;\n\nexport {\n  createNavigationMenuScope,\n  //\n  NavigationMenu,\n  NavigationMenuSub,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuContent,\n  NavigationMenuViewport,\n  //\n  Root,\n  Sub,\n  List,\n  Item,\n  Trigger,\n  Link,\n  Indicator,\n  Content,\n  Viewport,\n};\nexport type {\n  NavigationMenuProps,\n  NavigationMenuSubProps,\n  NavigationMenuListProps,\n  NavigationMenuItemProps,\n  NavigationMenuTriggerProps,\n  NavigationMenuLinkProps,\n  NavigationMenuIndicatorProps,\n  NavigationMenuContentProps,\n  NavigationMenuViewportProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}