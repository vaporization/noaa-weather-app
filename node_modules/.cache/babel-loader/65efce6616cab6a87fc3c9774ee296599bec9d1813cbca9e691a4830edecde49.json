{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saweb\\\\noaa-weather-app\\\\src\\\\DataDisplay.js\";\nimport React from 'react';\nimport './DataDisplay.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getConvertedData = (data, type, dataColumnColors, dataEntryColor) => {\n  // Updated\n  if (!data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available for this station.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n  const reversedData = [...data].reverse();\n  return reversedData.map((entry, index) => {\n    const value = parseFloat(entry.v || entry.s);\n    let displayValue = '';\n    switch (type) {\n      case 'Water Level':\n      case 'Tide Predictions':\n        displayValue = `${value.toFixed(2)} ft (${(value * 0.3048).toFixed(2)} m)`;\n        break;\n      case 'Water Temperature':\n        displayValue = `${value.toFixed(2)}° F (${((value - 32) * 5 / 9).toFixed(2)}° C)`;\n        break;\n      case 'Air Pressure':\n        displayValue = `${value.toFixed(2)} mb (${(value * 0.02953).toFixed(2)} inHg)`;\n        break;\n      case 'Air Temperature':\n        displayValue = `${value.toFixed(2)}° F (${((value - 32) * 5 / 9).toFixed(2)}° C)`;\n        break;\n      case 'Wind Speed':\n        displayValue = `${value.toFixed(2)} m/s (${(value * 2.23694).toFixed(2)} mph)`;\n        break;\n      default:\n        displayValue = `${value}`;\n        break;\n    }\n    const time = new Date(entry.t);\n    const localTime = new Intl.DateTimeFormat('en-US', {\n      dateStyle: 'short',\n      timeStyle: 'short',\n      timeZone: 'America/New_York' // Adjust this to the desired time zone or leave it as it is\n    }).format(time);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `data-entry ${index === 0 ? 'highlight' : ''}`,\n      style: {\n        color: dataColumnColors.textColor,\n        backgroundColor: dataEntryColor\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 12\n        }, this), \" \", localTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Value:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 12\n        }, this), \" \", displayValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  });\n};\nconst DataDisplay = ({\n  title,\n  data,\n  dataColumnColors,\n  dataEntryColor\n}) => {\n  // Updated\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-column\",\n    style: {\n      color: dataColumnColors.textColor,\n      backgroundColor: dataColumnColors.backgroundColor,\n      opacity: dataColumnColors.alpha\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), getConvertedData(data, title, dataColumnColors, dataEntryColor), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","getConvertedData","data","type","dataColumnColors","dataEntryColor","length","children","fileName","_jsxFileName","lineNumber","columnNumber","reversedData","reverse","map","entry","index","value","parseFloat","v","s","displayValue","toFixed","time","Date","t","localTime","Intl","DateTimeFormat","dateStyle","timeStyle","timeZone","format","className","style","color","textColor","backgroundColor","DataDisplay","title","opacity","alpha","_c","$RefreshReg$"],"sources":["C:/Users/saweb/noaa-weather-app/src/DataDisplay.js"],"sourcesContent":["import React from 'react';\r\nimport './DataDisplay.css';\r\n\r\nconst getConvertedData = (data, type, dataColumnColors, dataEntryColor) => { // Updated\r\n  if (!data || data.length === 0) {\r\n    return <p>No data available for this station.</p>;\r\n  }\r\n\r\n  const reversedData = [...data].reverse();\r\n\r\n  return reversedData.map((entry, index) => {\r\n    const value = parseFloat(entry.v || entry.s);\r\n    let displayValue = '';\r\n\r\n    switch (type) {\r\n      case 'Water Level':\r\n      case 'Tide Predictions':\r\n        displayValue = `${value.toFixed(2)} ft (${(value * 0.3048).toFixed(2)} m)`;\r\n        break;\r\n      case 'Water Temperature':\r\n        displayValue = `${value.toFixed(2)}° F (${((value - 32) * 5 / 9).toFixed(2)}° C)`;\r\n        break;\r\n      case 'Air Pressure':\r\n        displayValue = `${value.toFixed(2)} mb (${(value * 0.02953).toFixed(2)} inHg)`;\r\n        break;\r\n      case 'Air Temperature':\r\n        displayValue = `${value.toFixed(2)}° F (${((value - 32) * 5 / 9).toFixed(2)}° C)`;\r\n        break;\r\n      case 'Wind Speed':\r\n        displayValue = `${value.toFixed(2)} m/s (${(value * 2.23694).toFixed(2)} mph)`;\r\n        break;\r\n      default:\r\n        displayValue = `${value}`;\r\n        break;\r\n    }\r\n\r\n    const time = new Date(entry.t);\r\n    const localTime = new Intl.DateTimeFormat('en-US', {\r\n      dateStyle: 'short',\r\n      timeStyle: 'short',\r\n      timeZone: 'America/New_York', // Adjust this to the desired time zone or leave it as it is\r\n    }).format(time);\r\n\r\n    return (\r\n      <div key={index} className={`data-entry ${index === 0 ? 'highlight' : ''}`} style={{ color: dataColumnColors.textColor, backgroundColor: dataEntryColor }}> {/* Updated */}\r\n        <p><strong>Time:</strong> {localTime}</p>\r\n        <br></br>\r\n        <p><strong>Value:</strong> {displayValue}</p>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nconst DataDisplay = ({ title, data, dataColumnColors, dataEntryColor }) => { // Updated\r\n  return (\r\n    <div className=\"data-column\" style={{ color: dataColumnColors.textColor, backgroundColor: dataColumnColors.backgroundColor, opacity: dataColumnColors.alpha }}>\r\n      <h2>{title}</h2>\r\n      {getConvertedData(data, title, dataColumnColors, dataEntryColor)} {/* Updated */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}